import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"

export async function POST(req: Request) {
  try {
    const { user_facts, tone, length, current_bio, action } = await req.json()

    if (action === "generate") {
      try {
        const response = await fetch("https://functions.yandexcloud.net/d4e3uer658357b9igkin", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ user_facts, tone, length, current_bio, action }),
        })
        if (response.ok) {
          const data = await response.json()
          return Response.json(data, { status: response.status })
        } else {
          console.log(response)
        }
      } catch (e) {
        // fallback –Ω–∏–∂–µ
        console.log(e)
      }
      const object = {
        "bio_variants": [
          "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä, –ª—é–±—è—â–∏–π –ø–µ—à–∏–µ –ø–æ—Ö–æ–¥—ã. –ë–∞—Ä—Å–∏–∫ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚Äî –º–æ–π –∫–æ–º–ø–∞—Å –∏ —Å–ø—É—Ç–Ω–∏–∫.",
          "–°–æ–∑–¥–∞—é –ø—Ä–æ–¥—É–∫—Ç—ã –¥–Ω—ë–º, –≥—É–ª—è—é —Å –ë–∞—Ä—Å–∏–∫–æ–º –ø–æ —Ç—Ä–æ–ø–∞–º –≤–µ—á–µ—Ä–æ–º. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è?",
          "üíªüé® –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä. ü•æ –õ—é–±–ª—é –ø–æ—Ö–æ–¥—ã. üê± –ë–∞—Ä—Å–∏–∫ ‚Äî –±–æ—Å—Å –º–æ–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!"
        ]
      }
      return Response.json(object)
    } else if (action === "rewrite") {
      try {
        const response = await fetch("https://functions.yandexcloud.net/d4e3uer658357b9igkin", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ user_facts, tone, length, current_bio, action }),
        })
        if (response.ok) {
          const data = await response.json()
          return Response.json(data, { status: response.status })
        }
      } catch (e) {
        // fallback –Ω–∏–∂–µ
      }
      const object = {
        "rewritten_variants": [
          "–î–∏–∑–∞–π–Ω–µ—Ä —Å –∫–æ—Ç–æ–º –∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∞–º–∏. –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å—á–∞—Å—Ç—å—è ‚Äî —ç—Ç–æ –ë–∞—Ä—Å–∏–∫ –∏ —Ç—Ä–æ–ø–∞.",
          "–ü–æ –±—É–¥–Ω—è–º ‚Äî –¥–∏–∑–∞–π–Ω–µ—Ä, –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º ‚Äî –ª–µ—Å–Ω–æ–π —ç–ª—å—Ñ. –ë–∞—Ä—Å–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç.",
          "üëü –Ø –±–µ–≥—É –≤ –ø–æ—Ö–æ–¥, üé® —Ä–∏—Å—É—é –∏–¥–µ–∏, üê± –ë–∞—Ä—Å–∏–∫ ‚Äì –º–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."
        ]
      }
      return Response.json(object)
    }

    return Response.json({ error: "Invalid action" }, { status: 400 })
  } catch (error) {
    console.error("Error generating bio:", error)
    return Response.json({ error: "Failed to generate bio" }, { status: 500 })
  }
}
