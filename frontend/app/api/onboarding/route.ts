import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"

export async function POST(req: Request) {
  try {
    const { answers, finalize } = await req.json()

    if (answers.length === 0) {
      try {
        const response = await fetch("https://functions.yandexcloud.net/d4enmnrrjc4cllph4250", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ answers, finalize }),
        })
        if (response.ok) {
          const data = await response.json()
          return Response.json(data, { status: response.status })
        }
      } catch (e) {}
      const object = {
        "questions": [
          "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Å—á–∞—Å—Ç–ª–∏–≤—ã–º?",
          "–ö–∞–∫–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∏–ª–æ —Ç–µ–±–µ —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏?",
          "–ï—Å—Ç—å –ª–∏ –ø–µ—Å–Ω—è/—Ñ–∏–ª—å–º, –æ—Ç—Ä–∞–∂–∞—é—â–∏–µ —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å? –ü–æ—á–µ–º—É?",
          "–ö–∞–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –¥–µ–Ω—å –ª—É—á—à–µ?",
          "–ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª–æ 24 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å–∞, –∫–∞–∫ –±—ã —Ç—ã –∏—Ö –ø–æ—Ç—Ä–∞—Ç–∏–ª?"
        ]
      }
      return Response.json(object)
    } else if (finalize && answers.length >= 5) {
      try {
        const response = await fetch("https://functions.yandexcloud.net/d4enmnrrjc4cllph4250", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ answers, finalize }),
        })
        if (response.ok) {
          const data = await response.json()
          return Response.json(data, { status: response.status })
        }
      } catch (e) {}
      const object = {
        "facts": [
          "–û–±–æ–∂–∞–µ—Ç –≥–æ—Ä–Ω—ã–µ –ø–æ—Ö–æ–¥—ã",
          "–ë–µ–≥–∞–µ—Ç –ø–æ —É—Ç—Ä–∞–º 5 –∫–º",
          "–°–æ–±–∏—Ä–∞–µ—Ç –∞–≤—Ç–æ—Å—Ç–æ–ø-–∏—Å—Ç–æ—Ä–∏–∏",
          "–õ–æ–≤–∏—Ç —Ä–∞—Å—Å–≤–µ—Ç—ã —Å –∫–Ω–∏–≥–æ–π —É –æ–∑–µ—Ä–∞",
          "–£—á–∏—Ç—Å—è —Ü–µ–Ω–∏—Ç—å –ø–∞—É–∑—ã –≤ –±–µ—Å–µ–¥–µ"
        ],
        "bio": {
          "bioA": "–õ—é–±–∏—Ç–µ–ª—å –≥–æ—Ä, —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø—Ä–æ–±–µ–∂–µ–∫ –∏ —Ä–∞—Å—Å–≤–µ—Ç–æ–≤ —É –æ–∑–µ—Ä–∞. –í—Å–µ–≥–¥–∞ –≤ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ —á–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.",
          "bioB": "ü•æ‚õ∞Ô∏è –ë–µ–≥—É –∫ —Å–æ–ª–Ω—Ü—É, –ª–æ–≤–ª—é –∞–≤—Ç–æ—Å—Ç–æ–ø-–∏—Å—Ç–æ—Ä–∏–∏ –∏ —á–∏—Ç–∞—é –Ω–∞ –±–µ—Ä–µ–≥—É –æ–∑–µ—Ä–∞. –ù–∞–ø–∏—à–µ—à—å, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª —Ä–∞—Å—Å–≤–µ—Ç? üåÖüìö"
        },
        "openers": [
          "–ì–¥–µ –±—ã —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å–≤–µ—Ç ‚Äî –≤ –≥–æ—Ä–∞—Ö –∏–ª–∏ —É –≤–æ–¥—ã? üåÑ",
          "–ö–∞–∫–æ–π —Å–∞—É–Ω–¥—Ç—Ä–µ–∫ –≤–∫–ª—é—á–∞–µ—à—å, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ?",
          "–¢–≤–æ—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ ‚Äî –≤—ã–∑–æ–≤ –∏–ª–∏ –∫–æ–º—Ñ–æ—Ä—Ç?"
        ]
      }
      return Response.json(object)
    } else {
      try {
        const response = await fetch("https://functions.yandexcloud.net/d4enmnrrjc4cllph4250", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ answers, finalize }),
        })
        if (response.ok) {
          const data = await response.json()
          return Response.json(data, { status: response.status })
        }
      } catch (e) {
        console.log(e)
      }
      const object = {
        "question": "–ï—Å—Ç—å –ª–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫–∞–∂–¥–æ–µ –ª–µ—Ç–æ?"
      }
      return Response.json(object)
    }
  } catch (error) {
    console.error("Error in onboarding:", error)
    return Response.json({ error: "Failed to process onboarding" }, { status: 500 })
  }
}
