"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Loader2, Copy, User, Sparkles } from "lucide-react"

interface BioResponse {
  bio_variants?: string[]
  rewritten_variants?: string[]
}

export function BioForm() {
  const [activeTab, setActiveTab] = useState("generate")
  const [generateForm, setGenerateForm] = useState({
    facts: { –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: "", —Ö–æ–±–±–∏: "", –ø–∏—Ç–æ–º–µ—Ü: "", –¥—Ä—É–≥–æ–µ: "" },
    tone: "",
    length: "",
  })
  const [rewriteForm, setRewriteForm] = useState({
    currentBio: "",
    tone: "",
  })
  const [isLoading, setIsLoading] = useState(false)
  const [result, setResult] = useState<BioResponse | null>(null)

  const updateFact = (key: string, value: string) => {
    setGenerateForm((prev) => ({
      ...prev,
      facts: { ...prev.facts, [key]: value },
    }))
  }

  const generateBio = async () => {
    const filledFacts = Object.entries(generateForm.facts)
      .filter(([_, value]) => value.trim())
      .reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})

    if (Object.keys(filledFacts).length === 0 || !generateForm.tone || !generateForm.length) return

    setIsLoading(true)
    try {
      const response = await fetch("/api/bio", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "generate",
          user_facts: filledFacts,
          tone: generateForm.tone,
          length: generateForm.length,
        }),
      })

      const data = await response.json()
      setResult(data)
    } catch (error) {
      console.error("Error:", error)
    } finally {
      setIsLoading(false)
    }
  }

  const rewriteBio = async () => {
    if (!rewriteForm.currentBio.trim() || !rewriteForm.tone) return

    setIsLoading(true)
    try {
      const response = await fetch("/api/bio", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "rewrite",
          current_bio: rewriteForm.currentBio,
          tone: rewriteForm.tone,
        }),
      })

      const data = await response.json()
      setResult(data)
    } catch (error) {
      console.error("Error:", error)
    } finally {
      setIsLoading(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-br from-purple-50 to-indigo-50 border-purple-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-purple-800">
            <User className="w-5 h-5" />
            <button onClick={() => {
              setGenerateForm({
                facts: {
                  –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: "–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä",
                  —Ö–æ–±–±–∏: "–ü–µ—à–∏–µ –ø–æ—Ö–æ–¥—ã, –ô–æ–≥–∞ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è, –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã —Å –¥—Ä—É–∑—å—è–º–∏",
                  –ø–∏—Ç–æ–º–µ—Ü: "–ö–æ—Ç –ë–∞—Ä—Å–∏–∫, –æ—á–µ–Ω—å –ª–µ–Ω–∏–≤—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ",
                  –¥—Ä—É–≥–æ–µ: "–ú–µ—á—Ç–∞—é –æ–±—ä–µ—Ö–∞—Ç—å –≤—Å—é –Ø–ø–æ–Ω–∏—é, –ò–Ω–æ–≥–¥–∞ –ø–∏—à—É —Å—Ç–∏—Ö–∏, –Ω–æ –Ω–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é, –£—á–∞—Å—Ç–≤—É—é –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö"
                },
                tone: "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
                length: "—Å—Ä–µ–¥–Ω–µ–µ"
              });
              setRewriteForm({
                currentBio: "–û–±–æ–∂–∞—é —á–∏—Ç–∞—Ç—å –Ω–æ–Ω-—Ñ–∏–∫—à–Ω –∫–Ω–∏–≥–∏. –õ—é–±–ª—é —É—Ç—Ä–æ –∏ –∫–æ—Ñ–µ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥. –õ–µ–≥–∫–æ –∑–∞–≤–æ–∂—É —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏.",
                tone: "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π"
              });
            }}>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏–æ–≥—Ä–∞—Ñ–∏–π</button>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="generate">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±–∏–æ</TabsTrigger>
              <TabsTrigger value="rewrite">–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ</TabsTrigger>
            </TabsList>

            <TabsContent value="generate" className="space-y-6 mt-6">
              {/* Facts Section */}
              <div className="space-y-4">
                <Label className="text-sm font-medium text-gray-700">–§–∞–∫—Ç—ã –æ –≤–∞—Å</Label>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="profession" className="text-xs text-gray-600">
                      –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
                    </Label>
                    <Input
                      id="profession"
                      value={generateForm.facts.–ø—Ä–æ—Ñ–µ—Å—Å–∏—è}
                      onChange={(e) => updateFact("–ø—Ä–æ—Ñ–µ—Å—Å–∏—è", e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="hobby" className="text-xs text-gray-600">
                      –•–æ–±–±–∏
                    </Label>
                    <Input
                      id="hobby"
                      value={generateForm.facts.—Ö–æ–±–±–∏}
                      onChange={(e) => updateFact("—Ö–æ–±–±–∏", e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–µ—à–∏–µ –ø–æ—Ö–æ–¥—ã"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="pet" className="text-xs text-gray-600">
                      –ü–∏—Ç–æ–º–µ—Ü
                    </Label>
                    <Input
                      id="pet"
                      value={generateForm.facts.–ø–∏—Ç–æ–º–µ—Ü}
                      onChange={(e) => updateFact("–ø–∏—Ç–æ–º–µ—Ü", e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ—Ç –ë–∞—Ä—Å–∏–∫"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="other" className="text-xs text-gray-600">
                      –î—Ä—É–≥–æ–µ
                    </Label>
                    <Input
                      id="other"
                      value={generateForm.facts.–¥—Ä—É–≥–æ–µ}
                      onChange={(e) => updateFact("–¥—Ä—É–≥–æ–µ", e.target.value)}
                      placeholder="–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ñ–∞–∫—Ç"
                    />
                  </div>
                </div>
              </div>

              {/* Tone Selection */}
              <div className="space-y-2">
                <Label className="text-sm font-medium text-gray-700">–¢–æ–Ω –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ *</Label>
                <Select
                  value={generateForm.tone}
                  onValueChange={(value) => setGenerateForm((prev) => ({ ...prev, tone: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π">ü§ó –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</SelectItem>
                    <SelectItem value="—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π">üòÑ –Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                    <SelectItem value="—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π">üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                    <SelectItem value="–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π">üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π</SelectItem>
                    <SelectItem value="–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π">üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Length Selection */}
              <div className="space-y-2">
                <Label className="text-sm font-medium text-gray-700">–î–ª–∏–Ω–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ *</Label>
                <Select
                  value={generateForm.length}
                  onValueChange={(value) => setGenerateForm((prev) => ({ ...prev, length: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–∫–æ—Ä–æ—Ç–∫–æ–µ">üìù –ö–æ—Ä–æ—Ç–∫–æ–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)</SelectItem>
                    <SelectItem value="—Å—Ä–µ–¥–Ω–µ–µ">üìÑ –°—Ä–µ–¥–Ω–µ–µ (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)</SelectItem>
                    <SelectItem value="–¥–ª–∏–Ω–Ω–æ–µ">üìã –î–ª–∏–Ω–Ω–æ–µ (5+ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Button
                onClick={generateBio}
                disabled={
                  Object.values(generateForm.facts).every((v) => !v.trim()) ||
                  !generateForm.tone ||
                  !generateForm.length ||
                  isLoading
                }
                className="w-full bg-gradient-to-r from-purple-500 to-indigo-500 hover:opacity-90 text-white font-medium py-3"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –°–æ–∑–¥–∞—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é
                  </>
                )}
              </Button>
            </TabsContent>

            <TabsContent value="rewrite" className="space-y-6 mt-6">
              {/* Current Bio */}
              <div className="space-y-2">
                <Label htmlFor="currentBio" className="text-sm font-medium text-gray-700">
                  –¢–µ–∫—É—â–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è *
                </Label>
                <Textarea
                  id="currentBio"
                  value={rewriteForm.currentBio}
                  onChange={(e) => setRewriteForm((prev) => ({ ...prev, currentBio: e.target.value }))}
                  placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è..."
                  className="min-h-[120px] resize-none"
                />
              </div>

              {/* New Tone */}
              <div className="space-y-2">
                <Label className="text-sm font-medium text-gray-700">–ù–æ–≤—ã–π —Ç–æ–Ω *</Label>
                <Select
                  value={rewriteForm.tone}
                  onValueChange={(value) => setRewriteForm((prev) => ({ ...prev, tone: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–Ω" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π">ü§ó –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π</SelectItem>
                    <SelectItem value="—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π">üòÑ –Æ–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                    <SelectItem value="—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π">üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                    <SelectItem value="–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π">üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π</SelectItem>
                    <SelectItem value="–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π">üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Button
                onClick={rewriteBio}
                disabled={!rewriteForm.currentBio.trim() || !rewriteForm.tone || isLoading}
                className="w-full bg-gradient-to-r from-purple-500 to-indigo-500 hover:opacity-90 text-white font-medium py-3"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é
                  </>
                )}
              </Button>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Results */}
      {result && (
        <div className="space-y-4">
          {(result.bio_variants || result.rewritten_variants)?.map((bio, index) => (
            <Card key={index} className="border-green-200 bg-green-50">
              <CardHeader>
                <CardTitle className="text-lg text-green-800 flex items-center justify-between">
                  <span className="flex items-center gap-2">
                    <Badge className="bg-green-100 text-green-800">–í–∞—Ä–∏–∞–Ω—Ç {index + 1}</Badge>
                  </span>
                  <Button size="sm" variant="outline" onClick={() => copyToClipboard(bio)}>
                    <Copy className="w-4 h-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-700 leading-relaxed">{bio}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}
